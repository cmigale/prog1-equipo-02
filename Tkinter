import tkinter as tk
from tkinter import ttk, messagebox, PhotoImage
import random
# ---------------- DATOS ----------------
usuarios = {
    "admin": {"contrase√±a": "123", "permiso": "admin"},
    "juan": {"contrase√±a": "123", "permiso": "usuario"}
}

#STOCK
def abrir_stock(parent):
    global stock
    ventana = tk.Toplevel(parent)
    ventana.title("CodeBridge - Productos")
    ventana.geometry("950x500")

    def actualizar_tabla():
        """Refresca la tabla de productos"""
        tree.delete(*tree.get_children())
        for producto in stock:
            tree.insert(
                "", "end",
                values=(
                    producto["codigo"],
                    producto["producto"],
                    producto["cantidad"],
                    f"${producto['precio']:.2f}"
                )
            )

    def agregar_producto():
        """Abre una ventana para a√±adir un nuevo producto"""
        dlg = tk.Toplevel(ventana)
        dlg.title("A√±adir producto")
        dlg.resizable(False, False)
        dlg.geometry("320x220")
        dlg.transient(ventana)
        dlg.grab_set()

        frm = ttk.Frame(dlg, padding=12)
        frm.pack(fill="both", expand=True)

        ttk.Label(frm, text="Producto:").grid(row=0, column=0, sticky="e", padx=6, pady=6)
        ttk.Label(frm, text="Cantidad:").grid(row=1, column=0, sticky="e", padx=6, pady=6)
        ttk.Label(frm, text="Precio:").grid(row=2, column=0, sticky="e", padx=6, pady=6)

        vnombre = ttk.Entry(frm, width=25)
        vcant = ttk.Entry(frm, width=25)
        vprecio = ttk.Entry(frm, width=25)
        vnombre.grid(row=0, column=1, pady=4)
        vcant.grid(row=1, column=1, pady=4)
        vprecio.grid(row=2, column=1, pady=4)

        def guardar():
            nombre = vnombre.get().strip()
            try:
                cantidad = int(vcant.get())
                precio = float(vprecio.get())
            except ValueError:
                messagebox.showerror("Error", "Cantidad y precio deben ser num√©ricos.")
                return
            if not nombre:
                messagebox.showerror("Error", "El nombre no puede estar vac√≠o.")
                return

            codigo = random.randint(100000, 999999)
            while any(p["codigo"] == codigo for p in stock):
                codigo = random.randint(100000, 999999)

            stock.append({"codigo": codigo, "producto": nombre, "cantidad": cantidad, "precio": precio})
            actualizar_tabla()
            messagebox.showinfo("√âxito", f"'{nombre}' agregado correctamente.")
            dlg.destroy()

        ttk.Button(frm, text="A√±adir", command=guardar).grid(row=3, column=0, columnspan=2, pady=10)


    ttk.Label(ventana, text="üì¶Stock", font=("Segoe UI", 16, "bold")).pack(pady=10)

    stock_frame = ttk.Frame(ventana)
    stock_frame.pack(fill="both", expand=True, padx=20, pady=10)

    scroll_y = ttk.Scrollbar(stock_frame, orient="vertical")
    tree = ttk.Treeview(
        stock_frame,
        columns=("C√≥digo", "Producto", "Cantidad", "Precio"),
        show="headings",
        height=15,
        yscrollcommand=scroll_y.set
    )
    scroll_y.config(command=tree.yview)
    scroll_y.pack(side="right", fill="y")
    tree.pack(fill="both", expand=True)

    # Encabezados y columnas
    tree.heading("C√≥digo", text="C√≥digo")
    tree.heading("Producto", text="Producto")
    tree.heading("Cantidad", text="Cantidad")
    tree.heading("Precio", text="Precio Unitario")

    tree.column("C√≥digo", width=150, anchor="center")
    tree.column("Producto", width=300, anchor="center")
    tree.column("Cantidad", width=150, anchor="center")
    tree.column("Precio", width=150, anchor="center")

    # Botones
    botones = ttk.Frame(ventana)
    botones.pack(pady=10)

    tk.Button(botones, text="‚ûï A√±adir producto", bg="#8EB2E9", command=agregar_producto).grid(row=0, column=0, padx=10)
    tk.Button(botones, text="‚úèÔ∏è Editar producto", bg="#8EB2E9").grid(row=0, column=1, padx=10)
    tk.Button(botones, text="‚ùå Eliminar producto", bg="#FC7F7F").grid(row=0, column=2, padx=10)

    actualizar_tabla()


# ---------------- FUNCIONES DE VERIFICACI√ìN ----------------
def verificar_usuario(usuario):
    return usuario in usuarios


def verificar_contrase√±a(usuario, contrase√±a):
    return usuarios[usuario]["contrase√±a"] == contrase√±a


# ---------------- SESI√ìN ----------------
def cerrar_sesion(menu, root, entry_usuario, entry_contrase√±a):
    menu.destroy()
    entry_usuario.delete(0, tk.END)
    entry_contrase√±a.delete(0, tk.END)
    root.deiconify()


# ---------------- ADMIN: CREAR CUENTA ----------------
def abrir_crear_cuenta():
    ventana = tk.Toplevel()
    ventana.title("Crear cuenta")
    ventana.geometry("320x220")
    ventana.configure(bg="white")
    ventana.resizable(False, False)

    frm = ttk.Frame(ventana, padding=12)
    frm.pack(fill="both", expand=True)

    ttk.Label(frm, text="Usuario nuevo:").grid(row=0, column=0, padx=6, pady=6, sticky="e")
    ttk.Label(frm, text="Contrase√±a:").grid(row=1, column=0, padx=6, pady=6, sticky="e")

    entry_usuario = ttk.Entry(frm, width=25)
    entry_contrase√±a = ttk.Entry(frm, show="*", width=25)
    entry_usuario.grid(row=0, column=1, pady=4)
    entry_contrase√±a.grid(row=1, column=1, pady=4)

    def crear():
        usuario = entry_usuario.get().strip() # saca lo que se haya escrito en el campo de usuario
        contrase√±a = entry_contrase√±a.get().strip() # saca lo que se haya escrito en el campo de contrase√±a

        if not usuario or not contrase√±a:
            messagebox.showerror("Error", "Complete todos los campos.")
            return

        if usuario in usuarios:
            messagebox.showerror("Error", "El usuario ya existe.")
            return

        usuarios[usuario] = {"contrase√±a": contrase√±a, "permiso": "usuario"}
        messagebox.showinfo("√âxito", f"Cuenta '{usuario}' creada.")
        ventana.destroy()

    tk.Button(frm, text="Crear cuenta", command=crear,
               bg="#8EB2E9", fg="white").grid(row=2, column=0, columnspan=2, pady=10)


# ---------------- ADMIN: BORRAR CUENTA ----------------
def abrir_borrar_cuenta():
    ventana = tk.Toplevel()
    ventana.title("Borrar cuenta")
    ventana.geometry("300x150")
    ventana.configure(bg="white")
    ventana.resizable(False, False)

    frm = ttk.Frame(ventana, padding=12)
    frm.pack(fill="both", expand=True)

    ttk.Label(frm, text="Usuario a borrar:").pack(pady=5)
    entry_usuario = ttk.Entry(frm, width=25)
    entry_usuario.pack()

    def borrar():
        usuario = entry_usuario.get().strip()

        if usuario not in usuarios:
            messagebox.showerror("Error", "Usuario no encontrado.")
            return

        if usuario == "admin":
            messagebox.showerror("Error", "No se puede borrar al admin.")
            return

        usuarios.pop(usuario)
        messagebox.showinfo("√âxito", f"Usuario '{usuario}' borrado.")
        ventana.destroy()

    ttk.Button(frm, text="Borrar", command=borrar).pack(pady=10)

# ---------------- MEN√ö PRINCIPAL ----------------
def abrir_menu(usuario, root):
    permiso = usuarios[usuario]["permiso"]

    menu = tk.Toplevel(root)
    menu.title("Men√∫ principal")
    menu.geometry("500x550")
    menu.configure(bg="white")
    menu.resizable(False, False)

    ttk.Label(menu, text="CodeBridge - Sistema de ventas", font=("Segoe UI", 20, "bold")).pack(pady=10)

    # Logo
    try:
        logo = PhotoImage(file="logo.png")
        tk.Label(menu, image=logo, bg="white").pack(pady=10)
        menu.logo = logo
    except:
        tk.Label(menu, text="[Logo]", font=("Segoe UI", 14),
                 bg="white").pack(pady=10)

    # Botones principales
    frm_botones = ttk.Frame(menu, padding=10)
    frm_botones.pack(pady=15)

    tk.Button(frm_botones, text="Nueva venta", width=25,
              bg="#8EB2E9").grid(row=0, column=0, padx=10, pady=10)
    tk.Button(frm_botones, text="Historial", width=25,
              bg="#8EB2E9").grid(row=0, column=1, padx=10, pady=10)
    tk.Button(frm_botones, text="Stock", width=25,
              bg="#8EB2E9").grid(row=1, column=0, padx=10, pady=10)

    tk.Button(frm_botones, text="Cerrar sesi√≥n", width=25, 
              bg="#FC7F7F",
               command=lambda: cerrar_sesion(menu, root, entry_usuario, entry_contrase√±a)
               ).grid(row=1, column=1, padx=10, pady=10)

    # Opciones de administrador
    if permiso == "admin":
        ttk.Separator(menu, orient="horizontal").pack(fill="x", pady=10)
        ttk.Label(menu, text="Opciones de administrador", font=("Segoe UI", 10, "bold")).pack(pady=5)
        frm_admin = ttk.Frame(menu, padding=10)
        frm_admin.pack()

        tk.Button(frm_admin, text="üë§ Crear cuenta", bg="#B0E29B", width=25, command=abrir_crear_cuenta).grid(row=0, column=0, padx=10, pady=5)
        tk.Button(frm_admin, text="‚ùå Borrar cuenta", bg="#E97070", width=25, command=abrir_borrar_cuenta).grid(row=1, column=0, padx=10, pady=5)

    # Al cerrar la ventana
    def volver_login():
        menu.destroy()
        root.deiconify()

    menu.protocol("WM_DELETE_WINDOW", volver_login)

# ---------------- LOGIN ----------------
def iniciar_sesion(root, entry_usuario, entry_contrase√±a):
    usuario = entry_usuario.get().strip()
    contrase√±a = entry_contrase√±a.get().strip()

    if not verificar_usuario(usuario):
        messagebox.showerror("Error", "Usuario no encontrado.")
        return

    if not verificar_contrase√±a(usuario, contrase√±a):
        messagebox.showerror("Error", "Contrase√±a incorrecta.")
        return

    messagebox.showinfo("Bienvenido", f"Sesi√≥n iniciada como {usuario}.")
    root.withdraw()
    abrir_menu(usuario, root)


# ---------------- VENTANA PRINCIPAL ----------------
root = tk.Tk()
root.title("CodeBridge - Inicio de sesi√≥n")
root.geometry("400x400")
root.configure(bg="white")
root.resizable(False, False)

# Logo
try:
    logo = PhotoImage(file="logo.png")
    tk.Label(root, image=logo, bg="white").pack(pady=10)
    root.logo = logo
except:
    ttk.Label(root, text="[Logo]", font=("Segoe UI", 14)).pack(pady=10)

ttk.Label(root, text="Inicio de sesi√≥n", font=("Segoe UI", 14, "bold")).pack(pady=5)

# Campos de entrada
frm_login = ttk.Frame(root, padding=12)
frm_login.pack(pady=10)

ttk.Label(frm_login, text="Usuario:").grid(row=0, column=0, sticky="e", padx=6, pady=4)
entry_usuario = ttk.Entry(frm_login, width=25)
entry_usuario.grid(row=0, column=1, pady=4)

ttk.Label(frm_login, text="Contrase√±a:").grid(row=1, column=0, sticky="e", padx=6, pady=4)
entry_contrase√±a = ttk.Entry(frm_login, show="*", width=25)
entry_contrase√±a.grid(row=1, column=1, pady=4)

# Bot√≥n de inicio
tk.Button(root, text="Iniciar sesi√≥n",
          command=lambda: iniciar_sesion(root, entry_usuario, entry_contrase√±a),
          bg="#6498E7", fg="white", width=20).pack(pady=15)

root.mainloop()
